/*
	 Exploratory Data Analysis (EDA): Sales Data

	 This is a script of data analysis performed on dataset we created through 
	 datawarehouse.

	 Script has two parts:
		1- Know the Database
			By using system generated tables we get to know about dataset, tables and colums.
		2- Data Exploration
			Data exploration is performed in three parts:
			-	Mesaure Explorations (Business numbers)
					Answering various business questions related to data. 
					Eg. Dates boundries,  Total records, Maximum and minimum values
			-	Magnitude Analysis (Deminisions / Categorical)
					Business numbers by categories. 
			-	Ranking Analysis (Best / worst cases)
					Top and Bottom values			

*/
-- Objects in database
SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Columns in a table
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- tables objects
SELECT * FROM sys.tables ORDER BY schema_id;



-- Mesaures explorations
-- Find all countries customers are from.
SELECT DISTINCT country
	FROM gold.dim_customers;

-- Find all categories of products
SELECT DISTINCT category, 
				subcategory, 
				product_name
	FROM gold.dim_products
	ORDER BY 1,2,3;

-- Time span on orders data
SELECT  
		MIN(order_date) AS First_order_date,
		MAX(order_date) AS Last_order_date
	FROM gold.fact_sales;

-- Total sales
SELECT SUM(sales_amount) AS Total_Sales
	FROM gold.fact_sales;

-- Numbers of items sold
SELECT SUM(sales_quantity) AS Total_Quantity
	FROM gold.fact_sales

-- Average price
SELECT AVG(sls_price) AS avg_price
	FROM gold.fact_sales;

-- total number of orders
SELECT COUNT(order_number) AS total_orders,
		COUNT(DISTINCT order_number) AS unique_total_orders
	FROM gold.fact_sales;


-- Total number of products
SELECT COUNT(product_id) AS total_products
	FROM gold.dim_products;

-- Total customers
SELECT COUNT(customer_id) AS total_customers
	FROM gold.dim_customers;

-- total number of customers who placed orders 
SELECT COUNT(DISTINCT customer_key) AS total_sales
	FROM gold.fact_sales;



-- Magnitude Analysis

-- total customers by countries
SELECT country,
		COUNT(customer_id) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Total customers by gender
SELECT gender,
		COUNT(customer_id) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Total products by category
SELECT 
	category,
	COUNT(product_key) AS Total_products
	FROM gold.dim_products
	GROUP BY category
	ORDER BY Total_products DESC;

-- Average cost by each category
SELECT 
	category,
	AVG(cost) AS avg_cost
	FROM gold.dim_products
	GROUP BY category
	ORDER BY avg_cost DESC;

-- revenue generated by each category
SELECT	
	p.category,
	SUM(f.sales_amount) AS total_sales
FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
	GROUP BY p.category;

-- Revenue generated by each customer
SELECT c.customer_key, c.first_name, c.last_name,
		SUM(f.sales_amount) AS total_revenue
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP By c.customer_key, c.first_name, c.last_name
	ORDER BY total_revenue DESC;

-- distribution of sold items across countries
SELECT c.country,
		SUM(f.sales_quantity) AS total_quantity
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP By  c.country
	ORDER BY total_quantity DESC;



-- Ranking Analysis

-- Best performing products
SELECT	 TOP 5
	p.product_name,
	SUM(f.sales_amount) AS total_sales
FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
	GROUP BY p.product_name
	ORDER BY total_sales DESC;

-- Worst performing products
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) AS total_sales
FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
	GROUP BY p.product_name
	ORDER BY total_sales;


-- Best performing sub categories
SELECT *
FROM (
SELECT	 
	p.subcategory,
	SUM(f.sales_amount) AS total_sales,
	ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS rank 
FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
	GROUP BY p.subcategory
) t 
WHERE rank <= 5;

-- Worst performing sub categories
SELECT *
FROM (
SELECT	 
	p.subcategory,
	SUM(f.sales_amount) AS total_sales,
	ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount)) AS rank 
FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
	GROUP BY p.subcategory
) t 
WHERE rank <= 5;


-- Top customers with revenue 
SELECT TOP 10 c.customer_key, c.first_name, c.last_name,
		SUM(f.sales_amount) AS total_revenue
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP By c.customer_key, c.first_name, c.last_name
	ORDER BY total_revenue DESC;

-- worst performing customers
SELECT TOP 5 c.customer_key, c.first_name, c.last_name,
		SUM(f.sales_amount) AS total_revenue
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP By c.customer_key, c.first_name, c.last_name
	ORDER BY total_revenue;